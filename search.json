[{"path":"http://johnmuschelli.com/SummarizedActigraphy/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"http://johnmuschelli.com/SummarizedActigraphy/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2018 John Muschelli  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. mni Copyright (C) 2018 John Muschelli This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"http://johnmuschelli.com/SummarizedActigraphy/articles/SummarizedActigraphy.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Summarizing Actigraphy Data","text":"data https://github.com/THLfi/read.gt3x/files/3522749/GT3X%2B.01.day.gt3x.zip. daily GT3X file ActiGraph. Let’s download data: data represents sub-second level accelerations X, Y, Z directions. Additional information devices can measured, temperature light. focus accelerometry data. GGIR::g.calibrate function method calibrate ENMO values [@GGIR_calibrate]. types activity data, things activity counts, step counts, previously summarized data. Data commonly calculated using proprietary methods algorithms.","code":"url = \"https://github.com/THLfi/read.gt3x/files/3522749/GT3X%2B.01.day.gt3x.zip\" destfile = tempfile(fileext = \".zip\") dl = utils::download.file(url, destfile = destfile) gt3x_file = utils::unzip(destfile, exdir = tempdir()) gt3x_file = gt3x_file[!grepl(\"__MACOSX\", gt3x_file)] path = gt3x_file"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/articles/SummarizedActigraphy.html","id":"create-a-data-matrix","dir":"Articles","previous_headings":"","what":"Create a Data Matrix","title":"Summarizing Actigraphy Data","text":"use read_actigraphy function read files AccData object: read_actigraphy function uses read.gt3x::read.gt3x gt3x files, uses functions GGIR package [@GGIR]. output data matrix data, X, Y, Z columns, additional time column, date/time column. Additionally, header object additional metadata object: sampling frequency embedded header, also found freq element: case, 30 samples per second.","code":"x = read_actigraphy(path) Input is a .gt3x file, unzipping to a temporary location first... Unzipping gt3x data to /tmp/RtmpG0dhYI 1/1  Unzipping /tmp/RtmpG0dhYI/GT3X+ (01 day).gt3x  === info.txt, activity.bin, lux.bin extracted to /tmp/RtmpG0dhYI/GT3X+(01day) GT3X information  $ Serial Number     :\"NEO1DXXXXXXXX\"  $ Device Type       :\"GT3XPlus\"  $ Firmware          :\"2.5.0\"  $ Battery Voltage   :\"4.22\"  $ Sample Rate       :30  $ Start Date        : POSIXct, format: \"2012-06-27 10:54:00\"  $ Stop Date         : POSIXct, format: \"2012-06-28 11:54:00\"  $ Download Date     : POSIXct, format: \"2012-06-28 16:25:52\"  $ Board Revision    :\"4\"  $ Unexpected Resets :\"0\"  $ Sex               :\"Male\"  $ Height            :\"172.72\"  $ Mass              :\"69.8532249799612\"  $ Age               :\"43\"  $ Race              :\"White / Caucasian\"  $ Limb              :\"Ankle\"  $ Side              :\"Left\"  $ Dominance         :\"Non-Dominant\"  $ DateOfBirth       :\"621132192000000000\"  $ Subject Name      :\"GT3XPlus\"  $ Serial Prefix     :\"NEO\"  $ Last Sample Time  : 'POSIXct' num(0)   - attr(*, \"tzone\")= chr \"GMT\"  $ Acceleration Scale:341  $ Acceleration Min  :\"-6.0\"  $ Acceleration Max  :\"6.0\" Parsing GT3X data via CPP.. expected sample size: 2700000 Using NHANES-GT3X format - older format Sample size: 2700000 Scaling... Done (in 1.17964363098145 seconds) class(x) [1] \"AccData\" names(x) [1] \"data\"        \"freq\"        \"filename\"    \"header\"      \"missingness\" x$header  [38;5;246m# A tibble: 25 × 2 [39m    Field             Value                          [3m [38;5;246m<chr> [39m [23m              [3m [38;5;246m<chr> [39m [23m                       [38;5;250m 1 [39m Serial Number     NEO1DXXXXXXXX               [38;5;250m 2 [39m Device Type       GT3XPlus                    [38;5;250m 3 [39m Firmware          2.5.0                       [38;5;250m 4 [39m Battery Voltage   4.22                        [38;5;250m 5 [39m Sample Rate       30                          [38;5;250m 6 [39m Start Date        2012-06-27 10:54:00         [38;5;250m 7 [39m Stop Date         2012-06-28 11:54:00         [38;5;250m 8 [39m Download Date     2012-06-28 16:25:52.814926  [38;5;250m 9 [39m Board Revision    4                           [38;5;250m10 [39m Unexpected Resets 0                           [38;5;246m# ℹ 15 more rows [39m x$freq [1] 30"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/articles/SummarizedActigraphy.html","id":"summarizing-the-data-day-second-level","dir":"Articles","previous_headings":"","what":"Summarizing the data: Day-Second Level","title":"Summarizing Actigraphy Data","text":"summarize_daily_actigraphy summarizes AccData second-level data day. output tsibble: process follows, use floor_date lubridate, time rounded 1 seconds. rounding allows us use group_by time variable (really date/time variable) summarize data: summarize_daily_actigraphy, following process done: assumes non-NA values valid, wear-time estimation done. Also, estimating non-wear time/areas summarized data. accelerometry::weartime function estimates wear time, based count values. daily-level data good thresholding activity, categories like vigorous activity. Also, data used estimating sedentary active bouts, transition probability .","code":"daily = summarize_daily_actigraphy(x) Fixing Zeros with fix_zeros Flagging data Flagging Spikes Flagging Interval Jumps Flagging Spikes at Second-level Flagging Repeated Values Flagging Device Limit Values Flagging Zero Values Flagging 'Impossible' Values Calculating ai0 Calculating MAD Joining AI and MAD Joining flags head(daily)  [38;5;246m# A tsibble: 6 x 18 [1m] <GMT> [39m   time                   AI      SD    SD_t AI_DEFINED     MAD   MEDAD mean_r    [3m [38;5;246m<dttm> [39m [23m               [3m [38;5;246m<dbl> [39m [23m    [3m [38;5;246m<dbl> [39m [23m    [3m [38;5;246m<dbl> [39m [23m       [3m [38;5;246m<dbl> [39m [23m    [3m [38;5;246m<dbl> [39m [23m    [3m [38;5;246m<dbl> [39m [23m   [3m [38;5;246m<dbl> [39m [23m  [38;5;250m1 [39m 2012-06-27  [38;5;246m10:54:00 [39m 6.58  0.318   0.142       0.453  0.167   0.067 [4m3 [24m   0.949  [38;5;250m2 [39m 2012-06-27  [38;5;246m10:55:00 [39m 0.892 0.040 [4m0 [24m  0.033 [4m3 [24m      0.334  0.007 [4m6 [24m [4m5 [24m 0.003 [4m1 [24m [4m1 [24m  1.02   [38;5;250m3 [39m 2012-06-27  [38;5;246m10:56:00 [39m 1.44  0.049 [4m6 [24m  0.043 [4m1 [24m      0.290  0.014 [4m1 [24m  0.005 [4m7 [24m [4m1 [24m  1.02   [38;5;250m4 [39m 2012-06-27  [38;5;246m10:57:00 [39m 0.224 0.006 [4m8 [24m [4m8 [24m 0.006 [4m8 [24m [4m8 [24m     0.012 [4m7 [24m 0.006 [4m0 [24m [4m1 [24m 0.006 [4m0 [24m [4m7 [24m  1.01   [38;5;250m5 [39m 2012-06-27  [38;5;246m10:58:00 [39m 1.12  0.069 [4m0 [24m  0.065 [4m8 [24m      0.366  0.011 [4m0 [24m  0.003 [4m2 [24m [4m6 [24m  1.02   [38;5;250m6 [39m 2012-06-27  [38;5;246m10:59:00 [39m 0.556 0.018 [4m4 [24m  0.015 [4m0 [24m      0.326  0.006 [4m6 [24m [4m7 [24m 0.003 [4m0 [24m [4m9 [24m  1.02   [38;5;246m# ℹ 10 more variables: ENMO_t <dbl>, flag_spike <int>, [39m  [38;5;246m#   flag_interval_jump <int>, flag_spike_second <int>, flag_same_value <int>, [39m  [38;5;246m#   flag_device_limit <int>, flag_all_zero <int>, flag_impossible <int>, [39m  [38;5;246m#   flags <dbl>, n_samples_in_unit <int> [39m library(dplyr)  Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union data = x$data data = data %>%    mutate(time = lubridate::floor_date(time, unit = \"1 seconds\"),          enmo = sqrt(X^2 + Y^2 + Z^2) - 1) head(data) Sampling Rate: Hz Firmware Version:  Serial Number Prefix:                   time X Y Z enmo 1 2012-06-27 10:54:00 0 0 0   -1 2 2012-06-27 10:54:00 0 0 0   -1 3 2012-06-27 10:54:00 0 0 0   -1 4 2012-06-27 10:54:00 0 0 0   -1 5 2012-06-27 10:54:00 0 0 0   -1 6 2012-06-27 10:54:00 0 0 0   -1 data = data %>%   group_by(time) %>%   summarize(     mad = (mad(X, na.rm = TRUE) +               mad(Y, na.rm = TRUE) +              mad(Z, na.rm = TRUE))/3,     ai = sqrt((var(X, na.rm = TRUE) +                   var(Y, na.rm = TRUE) +                   var(Z, na.rm = TRUE))/3),     n_values = sum(!is.na(enmo)),     enmo = mean(enmo, na.rm = TRUE)   ) head(data)  [38;5;246m# A tibble: 6 × 5 [39m   time                       mad     ai n_values    enmo    [3m [38;5;246m<dttm> [39m [23m                    [3m [38;5;246m<dbl> [39m [23m   [3m [38;5;246m<dbl> [39m [23m     [3m [38;5;246m<int> [39m [23m    [3m [38;5;246m<dbl> [39m [23m  [38;5;250m1 [39m 2012-06-27  [38;5;246m10:54:00.000 [39m 0      0            30 - [31m1 [39m       [38;5;250m2 [39m 2012-06-27  [38;5;246m10:54:01.000 [39m 0      0            30 - [31m1 [39m       [38;5;250m3 [39m 2012-06-27  [38;5;246m10:54:02.000 [39m 0      0            30 - [31m1 [39m       [38;5;250m4 [39m 2012-06-27  [38;5;246m10:54:03.000 [39m 0      0            30 - [31m1 [39m       [38;5;250m5 [39m 2012-06-27  [38;5;246m10:54:04.000 [39m 0      0.292        30 - [31m0 [39m [31m. [39m [31m689 [39m   [38;5;250m6 [39m 2012-06-27  [38;5;246m10:54:05.000 [39m 0.068 [4m0 [24m 0.076 [4m0 [24m       30  0.019 [4m9 [24m"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/articles/SummarizedActigraphy.html","id":"enmo","dir":"Articles","previous_headings":"Summarizing the data: Day-Second Level","what":"ENMO","title":"Summarizing Actigraphy Data","text":"One statistics calculated ENMO, Euclidean Norm Minus One, : \\[ ENMO_{t} = \\frac{1}{n_{t}} \\sum_{=1}^{n_t} \\left(\\sqrt{X_{}^2 + Y_{}^2 + Z_{}^2} - 1\\right) \\] \\(t\\) time point, rounded one second. case, \\(\\) represents sample, 30 ENMO measures per second, means number samples time point, \\(n_{t}\\), 30. cases, however, ENMO statistics calculated 1-second level. \\(ENMO_{t}\\) summarize_daily_actigraphy calculates \\(ENMO\\) sample, takes mean \\(ENMO_{t}\\) 1-second intervals. use \\(ENMO_{t}\\) represent second-level data, leaving bar hat, truth average. subtraction \\(1\\) subtract \\(1\\) gravity unit (g), data represents acceleration due gravity.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/articles/SummarizedActigraphy.html","id":"activity-index-ai","dir":"Articles","previous_headings":"Summarizing the data: Day-Second Level","what":"Activity Index (AI)","title":"Summarizing Actigraphy Data","text":"Activity Index (AI) introduced @bai. calculated : \\[ AI_{t} = \\sqrt{\\frac{Var(X_{t}) + Var(Y_{t}) + Var(Z_{t})}{3}} \\] \\[ Var(X_{t}) = \\frac{1}{n_{t}} \\sum_{=1}^{n_t} \\left(X_{} - \\bar{X_{t}}\\right)^2 \\] \\(\\bar{X_{t} = \\frac{1}{n_{t}} \\sum_{=1}^{n_t} X_{}\\).","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/articles/SummarizedActigraphy.html","id":"median-absolute-deviation-mad","dir":"Articles","previous_headings":"Summarizing the data: Day-Second Level","what":"Median Absolute Deviation (MAD)","title":"Summarizing Actigraphy Data","text":"Median Absolute Deviation (MAD) introduced XX. calculated : \\[ MAD_{t} = \\frac{MAD(X_{t}) + MAD(Y_{t}) + MAD(Z_{t})}{3} \\] \\[ MAD(X_{t}) = \\text{median}_{t} \\left|X_{} - \\text{median}(X_{t})\\right| \\] \\(\\text{median}_{t}\\) median values \\(= 1, \\dots, n_{t}\\), \\(\\text{median}(X_{t}) = \\text{median}_{t} (X_{})\\).","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/articles/SummarizedActigraphy.html","id":"summarizing-the-data-second-level","dir":"Articles","previous_headings":"","what":"Summarizing the data: Second Level","title":"Summarizing Actigraphy Data","text":"summarize_actigraphy summarizes AccData second-level data “average” day average profile. second day, summary statistic taken, either mean median. summarize_actigraphy gives , output tsibble: number rows 86400, 60 seconds per minute, 60 minutes per hour, 24 hours per day: values represent “average” day, average determined mean median.","code":"average_day = summarize_actigraphy(x, .fns = list(mean = mean, median = median),) Running Daily Actigraphy Getting the First Day Summarizing Data head(average_day)  [38;5;246m# A tsibble: 6 x 13 [1m] [39m   time   AI_mean AI_median SD_mean SD_median MAD_mean MAD_median MEDAD_mean    [3m [38;5;246m<time> [39m [23m    [3m [38;5;246m<dbl> [39m [23m      [3m [38;5;246m<dbl> [39m [23m    [3m [38;5;246m<dbl> [39m [23m      [3m [38;5;246m<dbl> [39m [23m     [3m [38;5;246m<dbl> [39m [23m       [3m [38;5;246m<dbl> [39m [23m       [3m [38;5;246m<dbl> [39m [23m  [38;5;250m1 [39m 00 [38;5;246m' [39m00 [38;5;246m\" [39m  0.168     0.168  0.006 [4m1 [24m [4m3 [24m   0.006 [4m1 [24m [4m3 [24m  0.003 [4m9 [24m [4m4 [24m    0.003 [4m9 [24m [4m4 [24m    0.002 [4m9 [24m [4m1 [24m  [38;5;250m2 [39m 01 [38;5;246m' [39m00 [38;5;246m\" [39m  0.050 [4m1 [24m    0.050 [4m1 [24m 0.005 [4m1 [24m [4m4 [24m   0.005 [4m1 [24m [4m4 [24m  0.003 [4m9 [24m [4m3 [24m    0.003 [4m9 [24m [4m3 [24m    0.002 [4m7 [24m [4m6 [24m  [38;5;250m3 [39m 02 [38;5;246m' [39m00 [38;5;246m\" [39m  0         0      0         0        0          0          0        [38;5;250m4 [39m 03 [38;5;246m' [39m00 [38;5;246m\" [39m  0         0      0         0        0          0          0        [38;5;250m5 [39m 04 [38;5;246m' [39m00 [38;5;246m\" [39m  0         0      0         0        0          0          0        [38;5;250m6 [39m 05 [38;5;246m' [39m00 [38;5;246m\" [39m  0         0      0         0        0          0          0        [38;5;246m# ℹ 5 more variables: MEDAD_median <dbl>, ENMO_t_mean <dbl>, [39m  [38;5;246m#   ENMO_t_median <dbl>, mean_r_mean <dbl>, mean_r_median <dbl> [39m nrow(average_day) [1] 1440 range(average_day$time) Time differences in secs [1]     0 86340"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/articles/SummarizedActigraphy.html","id":"plotting-an-average-day","dir":"Articles","previous_headings":"","what":"Plotting an Average Day","title":"Summarizing Actigraphy Data","text":"plot AI values minute, summarized mean median:","code":"if (requireNamespace(\"ggplot2\", quietly = TRUE)) {   library(ggplot2)   library(magrittr)   average_day %>%     dplyr::rename_with(tolower) %>%      ggplot(aes(x = time, y = ai_mean)) +     geom_line()      average_day %>%     dplyr::rename_with(tolower) %>%      ggplot(aes(x = time, y = ai_median)) +     geom_line() }"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John Muschelli. Author, maintainer.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Muschelli J (2023). SummarizedActigraphy: Coerce 'Actigraphy' Summarized Experiments. https://github.com/muschellij2/SummarizedActigraphy, http://johnmuschelli.com/SummarizedActigraphy/.","code":"@Manual{,   title = {SummarizedActigraphy: Coerce 'Actigraphy' to Summarized Experiments},   author = {John Muschelli},   year = {2023},   note = {https://github.com/muschellij2/SummarizedActigraphy, http://johnmuschelli.com/SummarizedActigraphy/}, }"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/index.html","id":"summarizedactigraphy-package","dir":"","previous_headings":"","what":"Coerce Actigraphy to Summarized Experiments","title":"Coerce Actigraphy to Summarized Experiments","text":"goal SummarizedActigraphy provide functions reading Actigraphy data turn SummarizedExperiments.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Coerce Actigraphy to Summarized Experiments","text":"can install SummarizedActigraphy GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"muschellij2/SummarizedActigraphy\")"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/index.html","id":"reading-in-some-data","dir":"","previous_headings":"","what":"Reading in some data","title":"Coerce Actigraphy to Summarized Experiments","text":"","code":"library(SummarizedActigraphy) url = paste0(\"https://github.com/THLfi/read.gt3x/files/\",              \"3522749/GT3X%2B.01.day.gt3x.zip\") destfile = tempfile(fileext = \".zip\") dl = utils::download.file(url, destfile = destfile) gt3x_file = utils::unzip(destfile, exdir = tempdir()) gt3x_file = gt3x_file[!grepl(\"__MACOSX\", gt3x_file)] path = gt3x_file result = summarize_actigraphy(path) #> Running Daily Actigraphy #> Getting the First Day #> Summarizing Data result #> # A tsibble: 1,440 x 13 [1m] #>    time   AI_mean AI_median SD_mean SD_median MAD_mean MAD_median MEDAD_mean #>    <time>   <dbl>     <dbl>   <dbl>     <dbl>    <dbl>      <dbl>      <dbl> #>  1 00'00\"  0.168     0.168  0.00613   0.00613  0.00394    0.00394    0.00291 #>  2 01'00\"  0.0501    0.0501 0.00514   0.00514  0.00393    0.00393    0.00276 #>  3 02'00\"  0         0      0         0        0          0          0       #>  4 03'00\"  0         0      0         0        0          0          0       #>  5 04'00\"  0         0      0         0        0          0          0       #>  6 05'00\"  0         0      0         0        0          0          0       #>  7 06'00\"  0.0802    0.0802 0.00375   0.00375  0.00308    0.00308    0.00216 #>  8 07'00\"  0.0271    0.0271 0.00298   0.00298  0.00206    0.00206    0.00124 #>  9 08'00\"  0.0865    0.0865 0.00411   0.00411  0.00355    0.00355    0.00452 #> 10 09'00\"  0.0543    0.0543 0.00230   0.00230  0.00197    0.00197    0.00142 #> # ℹ 1,430 more rows #> # ℹ 5 more variables: MEDAD_median <dbl>, ENMO_t_mean <dbl>, #> #   ENMO_t_median <dbl>, mean_r_mean <dbl>, mean_r_median <dbl>"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/index.html","id":"reading-in-gt3x-files","dir":"","previous_headings":"","what":"Reading in GT3X files","title":"Coerce Actigraphy to Summarized Experiments","text":"GT3X files, must aware Idle Sleep Mode, saves power device, device essentially stops recording. cases, still want “full” time series without missing elements. read gt3x files, use read.gt3x::read.gt3x. default read.gt3x::read.gt3x, data isn’t output data set. use imputeZeros = TRUE argument, , 0s, doesn’t make sense (gravity even!?). Actigraph’s ActiLife, raw output data repeats value device went sleep mode. mimic behavior, SummarizedActigraphy::fix_zeros function sets values rows 0 NA (just X/Y/Z, time), uses zoo::na.locf last observation carried forward (LOCF). Aside: also use tidyr::fill(direction = \"\") tidyverse folks. SummarizedActigraphy::read_actigraphy, use read.gt3x::read.gt3x(asDataFrame = TRUE, imputeZeroes = TRUE) default. See example. Note well, fix_zeros anything data zero beginning time series (observation carry forward). behavior mimic ActiLife knowledge data likely discarded regardless.","code":"data = SummarizedActigraphy::read_actigraphy(path) #> Input is a .gt3x file, unzipping to a temporary location first... #> Unzipping gt3x data to /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//RtmpquRevB #> 1/1 #> Unzipping /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//RtmpquRevB/GT3X+ (01 day).gt3x #>  === info.txt, activity.bin, lux.bin extracted to /var/folders/1s/wrtqcpxn685_zk570bnx9_rr0000gr/T//RtmpquRevB/GT3X+(01day) #> GT3X information #>  $ Serial Number     :\"NEO1DXXXXXXXX\" #>  $ Device Type       :\"GT3XPlus\" #>  $ Firmware          :\"2.5.0\" #>  $ Battery Voltage   :\"4.22\" #>  $ Sample Rate       :30 #>  $ Start Date        : POSIXct, format: \"2012-06-27 10:54:00\" #>  $ Stop Date         : POSIXct, format: \"2012-06-28 11:54:00\" #>  $ Download Date     : POSIXct, format: \"2012-06-28 16:25:52\" #>  $ Board Revision    :\"4\" #>  $ Unexpected Resets :\"0\" #>  $ Sex               :\"Male\" #>  $ Height            :\"172.72\" #>  $ Mass              :\"69.8532249799612\" #>  $ Age               :\"43\" #>  $ Race              :\"White / Caucasian\" #>  $ Limb              :\"Ankle\" #>  $ Side              :\"Left\" #>  $ Dominance         :\"Non-Dominant\" #>  $ DateOfBirth       :\"621132192000000000\" #>  $ Subject Name      :\"GT3XPlus\" #>  $ Serial Prefix     :\"NEO\" #>  $ Last Sample Time  : 'POSIXct' num(0)  #>  - attr(*, \"tzone\")= chr \"GMT\" #>  $ Acceleration Scale:341 #>  $ Acceleration Min  :\"-6.0\" #>  $ Acceleration Max  :\"6.0\" #> Parsing GT3X data via CPP.. expected sample size: 2700000 #> Using NHANES-GT3X format - older format #> Sample size: 2700000 #> Scaling... #> Done (in 0.675724983215332 seconds) df = data$data df = tibble::as_tibble(df) all_zero = df$X == 0 & df$Y == 0 & df$Z == 0 df[all_zero, ] %>%    dplyr::mutate(time = lubridate::floor_date(time, \"1 sec\")) %>%    dplyr::distinct() #> # A tibble: 3,341 × 4 #>    time                    X     Y     Z #>    <dttm>              <dbl> <dbl> <dbl> #>  1 2012-06-27 10:54:00     0     0     0 #>  2 2012-06-27 10:54:01     0     0     0 #>  3 2012-06-27 10:54:02     0     0     0 #>  4 2012-06-27 10:54:03     0     0     0 #>  5 2012-06-27 10:54:04     0     0     0 #>  6 2012-06-27 11:27:40     0     0     0 #>  7 2012-06-27 11:27:41     0     0     0 #>  8 2012-06-27 11:27:42     0     0     0 #>  9 2012-06-27 11:27:43     0     0     0 #> 10 2012-06-27 11:27:44     0     0     0 #> # ℹ 3,331 more rows df = SummarizedActigraphy::fix_zeros(df) df[all_zero, ] %>%    dplyr::mutate(time = lubridate::floor_date(time, \"1 sec\")) %>%    dplyr::distinct() #> # A tibble: 3,341 × 4 #>    time                     X      Y     Z #>    <dttm>               <dbl>  <dbl> <dbl> #>  1 2012-06-27 10:54:00  0      0      0    #>  2 2012-06-27 10:54:01  0      0      0    #>  3 2012-06-27 10:54:02  0      0      0    #>  4 2012-06-27 10:54:03  0      0      0    #>  5 2012-06-27 10:54:04  0      0      0    #>  6 2012-06-27 11:27:40 -0.123 -0.029 -1.04 #>  7 2012-06-27 11:27:41 -0.123 -0.029 -1.04 #>  8 2012-06-27 11:27:42 -0.123 -0.029 -1.04 #>  9 2012-06-27 11:27:43 -0.123 -0.029 -1.04 #> 10 2012-06-27 11:27:44 -0.123 -0.029 -1.04 #> # ℹ 3,331 more rows"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/index.html","id":"converting-to-wide-1440-format","dir":"","previous_headings":"","what":"Converting to wide 1440 format","title":"Coerce Actigraphy to Summarized Experiments","text":"","code":"hms_times = structure(seq(0, 86340, by = 60), class = c(\"hms\", \"difftime\"),                       units = \"secs\") hms_times = tibble::tibble(time = hms_times) measure = \"AI_mean\" tmeasure = c(\"time\", measure) x = result[, tmeasure, drop = FALSE] x = tibble::as_tibble(x) x = dplyr::left_join(hms_times, x) #> Joining with `by = join_by(time)` head(x) #> # A tibble: 6 × 2 #>   time   AI_mean #>   <time>   <dbl> #> 1 00'00\"  0.168  #> 2 01'00\"  0.0501 #> 3 02'00\"  0      #> 4 03'00\"  0      #> 5 04'00\"  0      #> 6 05'00\"  0 x1440 = tidyr::spread(x, time, value = measure) x1440 #> # A tibble: 1 × 1,440 #>   `00:00:00` `00:01:00` `00:02:00` `00:03:00` `00:04:00` `00:05:00` `00:06:00` #>        <dbl>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl> #> 1      0.168     0.0501          0          0          0          0     0.0802 #> # ℹ 1,433 more variables: `00:07:00` <dbl>, `00:08:00` <dbl>, `00:09:00` <dbl>, #> #   `00:10:00` <dbl>, `00:11:00` <dbl>, `00:12:00` <dbl>, `00:13:00` <dbl>, #> #   `00:14:00` <dbl>, `00:15:00` <dbl>, `00:16:00` <dbl>, `00:17:00` <dbl>, #> #   `00:18:00` <dbl>, `00:19:00` <dbl>, `00:20:00` <dbl>, `00:21:00` <dbl>, #> #   `00:22:00` <dbl>, `00:23:00` <dbl>, `00:24:00` <dbl>, `00:25:00` <dbl>, #> #   `00:26:00` <dbl>, `00:27:00` <dbl>, `00:28:00` <dbl>, `00:29:00` <dbl>, #> #   `00:30:00` <dbl>, `00:31:00` <dbl>, `00:32:00` <dbl>, `00:33:00` <dbl>, …"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/actigraphy_df_to_SummarizedExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Actigraphy data.frame to a SummarizedExperiment — actigraphy_df_to_SummarizedExperiment","title":"Convert Actigraphy data.frame to a SummarizedExperiment — actigraphy_df_to_SummarizedExperiment","text":"Convert Actigraphy data.frame SummarizedExperiment","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/actigraphy_df_to_SummarizedExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Actigraphy data.frame to a SummarizedExperiment — actigraphy_df_to_SummarizedExperiment","text":"","code":"actigraphy_df_to_SummarizedExperiment(   x,   path_column = \"file\",   measure = NULL,   assay_name = measure,   rowData = NULL,   ...,   verbose = TRUE,   metadata = list() )"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/actigraphy_df_to_SummarizedExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Actigraphy data.frame to a SummarizedExperiment — actigraphy_df_to_SummarizedExperiment","text":"x optional `data.frame` describing samples/participants. path_column column `x` paths file names data.  Can also list column `x` column images measure measure grab create assay.  NULL, every measure column time assay_name Name `assay` SummarizedExperiment rowData row data pass SummarizedExperiment ... additional arguments pass summarize_actigraphy verbose print diagnostic messages metadata metadata passed SummarizedExperiment","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/actigraphy_df_to_SummarizedExperiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Actigraphy data.frame to a SummarizedExperiment — actigraphy_df_to_SummarizedExperiment","text":"SummarizedExperiment output","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/actigraphy_df_to_SummarizedExperiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Actigraphy data.frame to a SummarizedExperiment — actigraphy_df_to_SummarizedExperiment","text":"","code":"# \\donttest{   file = system.file(\"extdata\",                      \"TAS1H30182785_2019-09-17.gt3x\",                      package = \"SummarizedActigraphy\")   files = rep(file, 2)   df = data.frame(file = files,                   age = stats::rpois(length(files), 50),                   stringsAsFactors = FALSE)   se = actigraphy_df_to_SummarizedExperiment(df, \"file\") #> Running Daily Actigraphy #> Getting the First Day #> Summarizing Data #> Running Daily Actigraphy #> Getting the First Day #> Summarizing Data # } if (FALSE) {   df$file = factor(df$file)   se = actigraphy_df_to_SummarizedExperiment(df, \"file\", measure = \"AI_mean\") }"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/calculate_measures.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Summary Measures from Raw Accelerometer Data — calculate_activity_counts","title":"Calculate Summary Measures from Raw Accelerometer Data — calculate_activity_counts","text":"Calculate Summary Measures Raw Accelerometer Data","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/calculate_measures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Summary Measures from Raw Accelerometer Data — calculate_activity_counts","text":"","code":"calculate_activity_counts(   df,   sample_rate = NULL,   unit = \"1 min\",   verbose = TRUE,   ... )  calculate_ac(df, sample_rate = NULL, unit = \"1 min\", verbose = TRUE, ...)  calculate_measures(   df,   unit = \"1 min\",   fix_zeros = TRUE,   fill_in = TRUE,   by_second = FALSE,   trim = FALSE,   dynamic_range = NULL,   calculate_mims = TRUE,   calculate_ac = TRUE,   flag_data = TRUE,   flags = NULL,   ensure_all_time = TRUE,   verbose = TRUE,   sample_rate = NULL,   ... )  calculate_ai(df, unit = \"1 min\", ensure_all_time = TRUE, verbose = FALSE)  calculate_activity_index(   df,   unit = \"1 min\",   ensure_all_time = TRUE,   verbose = FALSE )  calculate_flags(df, unit = \"1 min\", ensure_all_time = TRUE)  calculate_n_idle(df, unit = \"1 min\", ensure_all_time = TRUE)  calculate_enmo(...)  calculate_ai_defined(...)  calculate_mad(df, unit = \"1 min\", ensure_all_time = TRUE, verbose = FALSE)  get_sample_rate(df, sample_rate = NULL)  calculate_auc(   df,   unit = \"1 min\",   sample_rate = NULL,   allow_truncation = FALSE,   ensure_all_time = TRUE,   verbose = TRUE )  calculate_fast_mims(   df,   unit = \"1 min\",   dynamic_range = NULL,   sample_rate = NULL,   allow_truncation = TRUE,   ensure_all_time = TRUE,   verbose = TRUE,   ... )  calculate_mims(   df,   unit = \"1 min\",   dynamic_range = c(-6, 6),   ensure_all_time = TRUE,   ... )"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/calculate_measures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Summary Measures from Raw Accelerometer Data — calculate_activity_counts","text":"df object columns `X`, `Y`, `Z` object class `AccData` sample_rate sample rate data, specified header object unit length time calculate measures .  character string specifying time unit multiple unit rounded . Valid base units `second`, `minute`, `hour`, `day`, `week`, `month`, `bimonth`, `quarter`, `season`, `halfyear`, `year`. Arbitrary unique English abbreviations period constructor allowed. verbose print diagnostic messages ... additional arguments pass [MIMSunit::mims_unit] fix_zeros fix_zeros run calculating measures? fill_in fix_zeros = TRUE, zeros filled last by_second last observation carried forward done within second? trim fix_zeros = TRUE, time course trimmed zero values beginning end time course? observation carried forward? dynamic_range Dynamic range device, gravity units calculate_mims MIMS units calculated? calculate_ac Activity Counts activityCounts package calculated? flag_data [SummarizedActigraphy::flag_qc()] run? executed fix_zeros measure calculation flags flags calculate, passed [SummarizedActigraphy::flag_qc()] ensure_all_time TRUE, times first last times output, even data time input allow_truncation truncate small values","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/calculate_measures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Summary Measures from Raw Accelerometer Data — calculate_activity_counts","text":"data set calculated features","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/calculate_measures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Summary Measures from Raw Accelerometer Data — calculate_activity_counts","text":"","code":"file = system.file(\"extdata\", \"TAS1H30182785_2019-09-17.gt3x\", package = \"SummarizedActigraphy\") res = read_actigraphy(file) #> Input is a .gt3x file, unzipping to a temporary location first... #> Unzipping gt3x data to /tmp/RtmpZXSAwj #> 1/1  #> Unzipping /home/runner/work/_temp/Library/SummarizedActigraphy/extdata/TAS1H30182785_2019-09-17.gt3x #>  === info.txt, log.bin extracted to /tmp/RtmpZXSAwj/TAS1H30182785_2019-09-17 #> GT3X information #>  $ Serial Number     :\"TAS1H30182785\" #>  $ Device Type       :\"Link\" #>  $ Firmware          :\"1.7.2\" #>  $ Battery Voltage   :\"4.18\" #>  $ Sample Rate       :100 #>  $ Start Date        : POSIXct, format: \"2019-09-17 18:40:00\" #>  $ Stop Date         : POSIXct, format: \"2019-09-18 19:00:00\" #>  $ Last Sample Time  : POSIXct, format: \"2019-09-17 19:20:05\" #>  $ TimeZone          :\"-04:00:00\" #>  $ Download Date     : POSIXct, format: \"2019-09-17 19:20:05\" #>  $ Board Revision    :\"8\" #>  $ Unexpected Resets :\"0\" #>  $ Acceleration Scale:256 #>  $ Acceleration Min  :\"-8.0\" #>  $ Acceleration Max  :\"8.0\" #>  $ Subject Name      :\"suffix_85\" #>  $ Serial Prefix     :\"TAS\" #> Parsing GT3X data via CPP.. expected sample size: 240500 #> ---GT3X PARAMETERS #> address: 0 key: 6 value: 1 #> address: 0 key: 7 value: 54703161 #> address: 0 key: 8 value: 8 #> address: 0 key: 9 value: 1534154836 #> address: 0 key: 13 value: 17235970 #> address: 0 key: 16 value: 3791650816 #> address: 0 key: 20 value: 0 #> address: 0 key: 21 value: 0 #> address: 0 key: 22 value: 0 #> address: 0 key: 23 value: 0 #> address: 0 key: 26 value: 2 #> address: 0 key: 28 value: 262013 #> address: 0 key: 29 value: 255 #> address: 0 key: 32 value: 16908288 #> address: 0 key: 37 value: 1024 #> address: 0 key: 38 value: 0 #> address: 0 key: 49 value: 2048 #> address: 0 key: 50 value: 88181047 #> address: 0 key: 51 value: 6.82667 #> address: 0 key: 55 value: 256 #> address: 0 key: 57 value: 333.87 #> address: 0 key: 58 value: 21 #> address: 0 key: 61 value: 2 #> address: 1 key: 0 value: 0 #> address: 1 key: 1 value: 872668711 #> address: 1 key: 2 (features)  value: 388 #> address: 1 key: 3 value: 1 #> address: 1 key: 4 value: 4294967131 #> address: 1 key: 5 value: 4294967095 #> address: 1 key: 6 value: 4294967149 #> address: 1 key: 7 value: 298 #> address: 1 key: 8 value: 286 #> address: 1 key: 9 value: 300 #> address: 1 key: 10 value: 100 #> address: 1 key: 12 (start time)  value: 1568745600 #> address: 1 key: 13 value: 1568833200 #> address: 1 key: 14 value: 1568745556 #> address: 1 key: 15 value: 74 #> address: 1 key: 16 value: 40 #> address: 1 key: 17 value: 72 #> address: 1 key: 20 value: 0 #> address: 1 key: 21 value: 0 #> address: 1 key: 33 value: 60000 #> address: 1 key: 34 value: 4294965247 #> address: 1 key: 35 value: 4294965190 #> address: 1 key: 36 value: 4294965237 #> address: 1 key: 37 value: 2051 #> address: 1 key: 38 value: 2000 #> address: 1 key: 39 value: 2048 #> address: 1 key: 40 value: 0 #> address: 1 key: 41 value: 1 #> address: 1 key: 42 value: 0 #> address: 1 key: 43 value: 4294967283 #> address: 1 key: 44 value: 0 #> address: 1 key: 45 value: 0 #> address: 1 key: 46 value: 0 #> ---END PARAMETERS #>  #> Activity with Sample Size of 0 #> payload start: 1568747741 #> total_records: 214100 #> max_samples: 240500 #> Activity with Sample Size of 0 #> payload start: 1568747759 #> total_records: 215900 #> max_samples: 240500 #> Total Records: 216000 #> Scaling... #> Creating dimnames  #> CPP returning  #> Done (in 0.553171634674072 seconds) measures = calculate_measures(res, dynamic_range = NULL, calculate_mims = FALSE) #> Fixing Zeros with fix_zeros #> Flagging data #> Flagging Spikes #> Flagging Interval Jumps #> Flagging Spikes at Second-level #> Flagging Repeated Values #> Flagging Device Limit Values #> Flagging Zero Values #> Flagging 'Impossible' Values #> Calculating ai0 #> Calculating MAD #> Joining AI and MAD #> Calculating AC #> Calculating Axis-Specific Activity Counts #> Summing up Axes #> Joining AC #> Joining flags auc = calculate_auc(res) #> Absolute values #> Calculting trapezoids #> Replacing first value as NA #> Calculating AUCs # \\donttest{ mims = calculate_mims(res, dynamic_range = NULL) #> ================================================================================ # } if (requireNamespace(\"data.table\", quietly = TRUE)) {    dt = data.table::as.data.table(res$data)    out = calculate_measures(dt, calculate_mims = FALSE, flag_data = FALSE) } #> Fixing Zeros with fix_zeros #> Calculating ai0 #> Calculating MAD #> Joining AI and MAD #> Calculating AC #> Calculating Axis-Specific Activity Counts #> Summing up Axes #> Joining AC"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/calibrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calibrate Accelerometer Data using GGIR — estimate_calibration_values","title":"Calibrate Accelerometer Data using GGIR — estimate_calibration_values","text":"Calibrate Accelerometer Data using GGIR","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/calibrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calibrate Accelerometer Data using GGIR — estimate_calibration_values","text":"","code":"estimate_calibration_values(   file,   verbose = TRUE,   fix_zeros = TRUE,   fill_in = TRUE,   by_second = FALSE,   trim = FALSE,   ... )  calibrate(   file,   verbose = TRUE,   fix_zeros = TRUE,   fill_in = TRUE,   by_second = FALSE,   trim = FALSE,   round_after_calibration = TRUE,   ... )"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/calibrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calibrate Accelerometer Data using GGIR — estimate_calibration_values","text":"file Either GT3X file, `AccData` object, `data.frame` `X/Y/Z` `time` verbose print diagnostic messages, higher number result higher verbosity fix_zeros fix_zeros run calculating measures? fill_in fix_zeros = TRUE, zeros filled last by_second last observation carried forward done within second? trim fix_zeros = TRUE, time course trimmed zero values beginning end time course? observation carried forward? ... Additional arguments pass g.calibrate round_after_calibration data rounded calibration? round 3 digits","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/calibrate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calibrate Accelerometer Data using GGIR — estimate_calibration_values","text":"set calibration coefficients","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/calibrate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calibrate Accelerometer Data using GGIR — estimate_calibration_values","text":"","code":"if (FALSE) {   index = 2   files = read.gt3x::gt3x_datapath(index)   if (all(is.na(files))) {     files = file.path(tempdir(), \".read.gt3x-data\",                       read.gt3x::gt3x_filename(index))   }   path = files[1]   res = read_actigraphy(path)   res = fix_zeros(res)   cab = calibrate(res) }"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/ensure_header_timestamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure `HEADER_TIME_STAMP` is in — ensure_header_timestamp","title":"Ensure `HEADER_TIME_STAMP` is in — ensure_header_timestamp","text":"Ensure `HEADER_TIME_STAMP` ","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/ensure_header_timestamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure `HEADER_TIME_STAMP` is in — ensure_header_timestamp","text":"","code":"ensure_header_timestamp(df, subset = TRUE)"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/ensure_header_timestamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure `HEADER_TIME_STAMP` is in — ensure_header_timestamp","text":"df data set time X/Y/Z subset select columns time X/Y/Z","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/ensure_header_timestamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure `HEADER_TIME_STAMP` is in — ensure_header_timestamp","text":"data set/`tibble`.  return `AccData` object","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/ensure_header_timestamp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensure `HEADER_TIME_STAMP` is in — ensure_header_timestamp","text":"","code":"file = system.file(\"extdata\", \"TAS1H30182785_2019-09-17.gt3x\", package = \"SummarizedActigraphy\") res = read_actigraphy(file, verbose = FALSE) df = ensure_header_timestamp(res)"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/fix_zeros.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix Zeros from Idle Sleep Mode — fix_zeros","title":"Fix Zeros from Idle Sleep Mode — fix_zeros","text":"Fix Zeros Idle Sleep Mode","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/fix_zeros.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix Zeros from Idle Sleep Mode — fix_zeros","text":"","code":"fix_zeros(df, fill_in = TRUE, by_second = FALSE, trim = FALSE)  idle_na_locf(df, by_second = FALSE)"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/fix_zeros.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix Zeros from Idle Sleep Mode — fix_zeros","text":"df object columns `X`, `Y`, `Z` object class `AccData` fill_in zeros filled last observation carried forward? by_second last observation carried forward done within second? trim time course trimmed zero values beginning end time course?","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/fix_zeros.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix Zeros from Idle Sleep Mode — fix_zeros","text":"data set zeros filled ","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/fix_zeros.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fix Zeros from Idle Sleep Mode — fix_zeros","text":"","code":"df = data.frame(   X = c(0.3/sqrt(0.5), rep(0, 3)),   Y = c(0.4/sqrt(0.5), rep(0, 3)),   Z = c(0.5/sqrt(0.5), rep(0, 3)),   stringsAsFactors = FALSE) fix_zeros(df) #>           X         Y         Z #> 1 0.4242641 0.5656854 0.7071068 #> 2 0.4242641 0.5656854 0.7071068 #> 3 0.4242641 0.5656854 0.7071068 #> 4 0.4242641 0.5656854 0.7071068 fix_zeros(df, fill_in = FALSE) #>           X         Y         Z #> 1 0.4242641 0.5656854 0.7071068 #> 2        NA        NA        NA #> 3        NA        NA        NA #> 4        NA        NA        NA fix_zeros(df, trim = TRUE) #>           X         Y         Z #> 1 0.4242641 0.5656854 0.7071068 #> 2 0.4242641 0.5656854 0.7071068 #> 3 0.4242641 0.5656854 0.7071068 #> 4 0.4242641 0.5656854 0.7071068 df$time = c(1,3,2, 4) fix_zeros(df) #> Warning: Time is unsorted, will resort the data set #>           X         Y         Z time #> 1 0.4242641 0.5656854 0.7071068    1 #> 3 0.4242641 0.5656854 0.7071068    2 #> 2 0.4242641 0.5656854 0.7071068    3 #> 4 0.4242641 0.5656854 0.7071068    4 acc = list(header = NULL, data = df ) class(acc) = \"AccData\" idle_na_locf(acc) #> Warning: Time is unsorted, will resort the data set #> $header #> NULL #>  #> $data #>           X         Y         Z time #> 1 0.4242641 0.5656854 0.7071068    1 #> 3 0.0000000 0.0000000 0.0000000    2 #> 2 0.0000000 0.0000000 0.0000000    3 #> 4 0.0000000 0.0000000 0.0000000    4 #>  #> attr(,\"class\") #> [1] \"AccData\" fix_zeros(acc, trim = TRUE) #> Warning: Time is unsorted, will resort the data set #> $header #> NULL #>  #> $data #>           X         Y         Z time #> 1 0.4242641 0.5656854 0.7071068    1 #> 3 0.4242641 0.5656854 0.7071068    2 #> 2 0.4242641 0.5656854 0.7071068    3 #> 4 0.4242641 0.5656854 0.7071068    4 #>  #> attr(,\"class\") #> [1] \"AccData\""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/flag_qc.html","id":null,"dir":"Reference","previous_headings":"","what":"Flag Quality Control Values — flag_qc","title":"Flag Quality Control Values — flag_qc","text":"Flag Quality Control Values","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/flag_qc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flag Quality Control Values — flag_qc","text":"","code":"flag_qc(   df,   dynamic_range = NULL,   verbose = TRUE,   flags = c(\"all\", \"spike\", \"interval_jump\", \"spike_second\", \"same_value\",     \"device_limit\", \"all_zero\", \"impossible\") )  flag_qc_all(   df,   dynamic_range = NULL,   verbose = TRUE,   flags = c(\"all\", \"spike\", \"interval_jump\", \"spike_second\", \"same_value\",     \"device_limit\", \"all_zero\", \"impossible\") )"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/flag_qc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flag Quality Control Values — flag_qc","text":"df data set actigraphy dynamic_range dynamic range device, used find device limit. verbose print diagnostic messages flags flags run QC.  set \"\", flags run, default.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/flag_qc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flag Quality Control Values — flag_qc","text":"data set `flags` column (`flag_qc`) number columns starting `flag_*` (`flag_qc_all`)","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/flag_qc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flag Quality Control Values — flag_qc","text":"","code":"file = system.file(\"extdata\", \"TAS1H30182785_2019-09-17.gt3x\", package = \"SummarizedActigraphy\") res = read_actigraphy(file) #> Input is a .gt3x file, unzipping to a temporary location first... #> Unzipping gt3x data to /tmp/RtmpZXSAwj #> 1/1  #> Unzipping /home/runner/work/_temp/Library/SummarizedActigraphy/extdata/TAS1H30182785_2019-09-17.gt3x #>  === info.txt, log.bin extracted to /tmp/RtmpZXSAwj/TAS1H30182785_2019-09-17 #> GT3X information #>  $ Serial Number     :\"TAS1H30182785\" #>  $ Device Type       :\"Link\" #>  $ Firmware          :\"1.7.2\" #>  $ Battery Voltage   :\"4.18\" #>  $ Sample Rate       :100 #>  $ Start Date        : POSIXct, format: \"2019-09-17 18:40:00\" #>  $ Stop Date         : POSIXct, format: \"2019-09-18 19:00:00\" #>  $ Last Sample Time  : POSIXct, format: \"2019-09-17 19:20:05\" #>  $ TimeZone          :\"-04:00:00\" #>  $ Download Date     : POSIXct, format: \"2019-09-17 19:20:05\" #>  $ Board Revision    :\"8\" #>  $ Unexpected Resets :\"0\" #>  $ Acceleration Scale:256 #>  $ Acceleration Min  :\"-8.0\" #>  $ Acceleration Max  :\"8.0\" #>  $ Subject Name      :\"suffix_85\" #>  $ Serial Prefix     :\"TAS\" #> Parsing GT3X data via CPP.. expected sample size: 240500 #> ---GT3X PARAMETERS #> address: 0 key: 6 value: 1 #> address: 0 key: 7 value: 54703161 #> address: 0 key: 8 value: 8 #> address: 0 key: 9 value: 1534154836 #> address: 0 key: 13 value: 17235970 #> address: 0 key: 16 value: 3791650816 #> address: 0 key: 20 value: 0 #> address: 0 key: 21 value: 0 #> address: 0 key: 22 value: 0 #> address: 0 key: 23 value: 0 #> address: 0 key: 26 value: 2 #> address: 0 key: 28 value: 262013 #> address: 0 key: 29 value: 255 #> address: 0 key: 32 value: 16908288 #> address: 0 key: 37 value: 1024 #> address: 0 key: 38 value: 0 #> address: 0 key: 49 value: 2048 #> address: 0 key: 50 value: 88181047 #> address: 0 key: 51 value: 6.82667 #> address: 0 key: 55 value: 256 #> address: 0 key: 57 value: 333.87 #> address: 0 key: 58 value: 21 #> address: 0 key: 61 value: 2 #> address: 1 key: 0 value: 0 #> address: 1 key: 1 value: 872668711 #> address: 1 key: 2 (features)  value: 388 #> address: 1 key: 3 value: 1 #> address: 1 key: 4 value: 4294967131 #> address: 1 key: 5 value: 4294967095 #> address: 1 key: 6 value: 4294967149 #> address: 1 key: 7 value: 298 #> address: 1 key: 8 value: 286 #> address: 1 key: 9 value: 300 #> address: 1 key: 10 value: 100 #> address: 1 key: 12 (start time)  value: 1568745600 #> address: 1 key: 13 value: 1568833200 #> address: 1 key: 14 value: 1568745556 #> address: 1 key: 15 value: 74 #> address: 1 key: 16 value: 40 #> address: 1 key: 17 value: 72 #> address: 1 key: 20 value: 0 #> address: 1 key: 21 value: 0 #> address: 1 key: 33 value: 60000 #> address: 1 key: 34 value: 4294965247 #> address: 1 key: 35 value: 4294965190 #> address: 1 key: 36 value: 4294965237 #> address: 1 key: 37 value: 2051 #> address: 1 key: 38 value: 2000 #> address: 1 key: 39 value: 2048 #> address: 1 key: 40 value: 0 #> address: 1 key: 41 value: 1 #> address: 1 key: 42 value: 0 #> address: 1 key: 43 value: 4294967283 #> address: 1 key: 44 value: 0 #> address: 1 key: 45 value: 0 #> address: 1 key: 46 value: 0 #> ---END PARAMETERS #>  #> Activity with Sample Size of 0 #> payload start: 1568747741 #> total_records: 214100 #> max_samples: 240500 #> Activity with Sample Size of 0 #> payload start: 1568747759 #> total_records: 215900 #> max_samples: 240500 #> Total Records: 216000 #> Scaling... #> Creating dimnames  #> CPP returning  #> Done (in 0.493653059005737 seconds) out = flag_qc(res) #> Flagging Spikes #> Flagging Interval Jumps #> Flagging Spikes at Second-level #> Flagging Repeated Values #> Flagging Device Limit Values #> Flagging Zero Values #> Flagging 'Impossible' Values"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/flag_spike.html","id":null,"dir":"Reference","previous_headings":"","what":"Flag Spikes — flag_spike","title":"Flag Spikes — flag_spike","text":"Flag Spikes","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/flag_spike.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flag Spikes — flag_spike","text":"","code":"flag_spike(df, spike_size = 11)  flag_interval_jump(df, verbose = FALSE)  flag_spike_second(df, spike_size = 11)  flag_device_limit(df, dynamic_range = NULL, epsilon = 0.05)  flag_contiguous_device_limit(df, dynamic_range = NULL, epsilon = 0.05)  flag_same_value(df, min_length = 1)  flag_all_zero(df, min_length = 3)  flag_impossible(df, min_length = 6)"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/flag_spike.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Flag Spikes — flag_spike","text":"https://wwwn.cdc.gov/Nchs/Nhanes/2011-2012/PAXMIN_G.htm","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/flag_spike.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flag Spikes — flag_spike","text":"df data set actigraphy spike_size size \"spike\" - absolute difference contiguous observations single axis dynamic_range dynamic range device, used find device limit. epsilon small adjustment values within device limit, minus epsilon, still flagged hitting limit. example, `dynamic_range = c(-6, 6)` `epsilon = 0.05`, value <= `-5.95` `>= 5.95` gravity units flagged min_length minimum length condition contiguous samples.  `min_length = 3`, least 3 `TRUE`s row required, stretches single `TRUE` values 2 `TRUE` followed `FALSE`, set `FALSE`.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/flag_spike.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flag Spikes — flag_spike","text":"data set back","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/flag_spike.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Flag Spikes — flag_spike","text":"`flag_spike` looks 2 contiguous values, within axis, larger absolute size (`11` gravity units).  `flag_spike_second` function groups data second, finds range values, within axis, determines range greater specified size (`11` g).","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/flag_spike.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flag Spikes — flag_spike","text":"","code":"file = system.file(\"extdata\", \"TAS1H30182785_2019-09-17.gt3x\", package = \"SummarizedActigraphy\") res = read_actigraphy(file) #> Input is a .gt3x file, unzipping to a temporary location first... #> Unzipping gt3x data to /tmp/RtmpZXSAwj #> 1/1  #> Unzipping /home/runner/work/_temp/Library/SummarizedActigraphy/extdata/TAS1H30182785_2019-09-17.gt3x #>  === info.txt, log.bin extracted to /tmp/RtmpZXSAwj/TAS1H30182785_2019-09-17 #> GT3X information #>  $ Serial Number     :\"TAS1H30182785\" #>  $ Device Type       :\"Link\" #>  $ Firmware          :\"1.7.2\" #>  $ Battery Voltage   :\"4.18\" #>  $ Sample Rate       :100 #>  $ Start Date        : POSIXct, format: \"2019-09-17 18:40:00\" #>  $ Stop Date         : POSIXct, format: \"2019-09-18 19:00:00\" #>  $ Last Sample Time  : POSIXct, format: \"2019-09-17 19:20:05\" #>  $ TimeZone          :\"-04:00:00\" #>  $ Download Date     : POSIXct, format: \"2019-09-17 19:20:05\" #>  $ Board Revision    :\"8\" #>  $ Unexpected Resets :\"0\" #>  $ Acceleration Scale:256 #>  $ Acceleration Min  :\"-8.0\" #>  $ Acceleration Max  :\"8.0\" #>  $ Subject Name      :\"suffix_85\" #>  $ Serial Prefix     :\"TAS\" #> Parsing GT3X data via CPP.. expected sample size: 240500 #> ---GT3X PARAMETERS #> address: 0 key: 6 value: 1 #> address: 0 key: 7 value: 54703161 #> address: 0 key: 8 value: 8 #> address: 0 key: 9 value: 1534154836 #> address: 0 key: 13 value: 17235970 #> address: 0 key: 16 value: 3791650816 #> address: 0 key: 20 value: 0 #> address: 0 key: 21 value: 0 #> address: 0 key: 22 value: 0 #> address: 0 key: 23 value: 0 #> address: 0 key: 26 value: 2 #> address: 0 key: 28 value: 262013 #> address: 0 key: 29 value: 255 #> address: 0 key: 32 value: 16908288 #> address: 0 key: 37 value: 1024 #> address: 0 key: 38 value: 0 #> address: 0 key: 49 value: 2048 #> address: 0 key: 50 value: 88181047 #> address: 0 key: 51 value: 6.82667 #> address: 0 key: 55 value: 256 #> address: 0 key: 57 value: 333.87 #> address: 0 key: 58 value: 21 #> address: 0 key: 61 value: 2 #> address: 1 key: 0 value: 0 #> address: 1 key: 1 value: 872668711 #> address: 1 key: 2 (features)  value: 388 #> address: 1 key: 3 value: 1 #> address: 1 key: 4 value: 4294967131 #> address: 1 key: 5 value: 4294967095 #> address: 1 key: 6 value: 4294967149 #> address: 1 key: 7 value: 298 #> address: 1 key: 8 value: 286 #> address: 1 key: 9 value: 300 #> address: 1 key: 10 value: 100 #> address: 1 key: 12 (start time)  value: 1568745600 #> address: 1 key: 13 value: 1568833200 #> address: 1 key: 14 value: 1568745556 #> address: 1 key: 15 value: 74 #> address: 1 key: 16 value: 40 #> address: 1 key: 17 value: 72 #> address: 1 key: 20 value: 0 #> address: 1 key: 21 value: 0 #> address: 1 key: 33 value: 60000 #> address: 1 key: 34 value: 4294965247 #> address: 1 key: 35 value: 4294965190 #> address: 1 key: 36 value: 4294965237 #> address: 1 key: 37 value: 2051 #> address: 1 key: 38 value: 2000 #> address: 1 key: 39 value: 2048 #> address: 1 key: 40 value: 0 #> address: 1 key: 41 value: 1 #> address: 1 key: 42 value: 0 #> address: 1 key: 43 value: 4294967283 #> address: 1 key: 44 value: 0 #> address: 1 key: 45 value: 0 #> address: 1 key: 46 value: 0 #> ---END PARAMETERS #>  #> Activity with Sample Size of 0 #> payload start: 1568747741 #> total_records: 214100 #> max_samples: 240500 #> Activity with Sample Size of 0 #> payload start: 1568747759 #> total_records: 215900 #> max_samples: 240500 #> Total Records: 216000 #> Scaling... #> Creating dimnames  #> CPP returning  #> Done (in 0.518094301223755 seconds) res = flag_spike(res) res = flag_interval_jump(res) res = flag_spike_second(res) res = flag_same_value(res) res = flag_device_limit(res) res = flag_all_zero(res) res = flag_impossible(res)"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/get_dynamic_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Dynamic Range — get_dynamic_range","title":"Get Dynamic Range — get_dynamic_range","text":"Get Dynamic Range","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/get_dynamic_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Dynamic Range — get_dynamic_range","text":"","code":"get_dynamic_range(df, dynamic_range = NULL)"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/get_dynamic_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Dynamic Range — get_dynamic_range","text":"df AccData object read_actigraphy dynamic_range dynamic range.  NULL, guess header data","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/get_dynamic_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Dynamic Range — get_dynamic_range","text":"length-2 numeric vector, original dynamic range (checking done)","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/get_transformations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Transformations — get_transformations","title":"Get Transformations — get_transformations","text":"Get Transformations","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/get_transformations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Transformations — get_transformations","text":"","code":"get_transformations(df)  set_transformations(df, transformations, add = TRUE)"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/get_transformations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Transformations — get_transformations","text":"df data set data, usually time X/Y/Z.  Usually read_actigraphy transformations character string transformations add Add transformations already `df`","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/get_transformations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Transformations — get_transformations","text":"set_transformations returns data, `transformations` attribute updated set_transformations returns attribute `transformations`","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/ggir_process.html","id":null,"dir":"Reference","previous_headings":"","what":"Run GGIR Processing — ggir_process","title":"Run GGIR Processing — ggir_process","text":"Run GGIR Processing","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/ggir_process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run GGIR Processing — ggir_process","text":"","code":"ggir_process(df, unit = \"1 min\", calibrate = TRUE, verbose = TRUE, ...)"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/ggir_process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run GGIR Processing — ggir_process","text":"df object columns `X`, `Y`, `Z` object class `AccData` unit length time calculate measures .  character string specifying time unit multiple unit rounded . Valid base units `second`, `minute`, `hour`, `day`, `week`, `month`, `bimonth`, `quarter`, `season`, `halfyear`, `year`. Arbitrary unique English abbreviations period constructor allowed. calibrate Run calibration, passed .calibrate GGIR verbose print diagnostic messages ... additional arguments pass g.shell.GGIR","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/ggir_process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run GGIR Processing — ggir_process","text":"list output elements","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/ggir_process.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run GGIR Processing — ggir_process","text":"","code":"if (FALSE) { files = read.gt3x::gt3x_datapath(2) path = files[1] res = read_actigraphy(path) res = fix_zeros(res) out = ggir_process(res, desiredtz = \"UTC\") sum_data = out$part2$IMP$metashort m = calculate_mad(res) m[-(1:10), c(\"HEADER_TIME_STAMP\", \"ENMO_t\")] head(sum_data, 20) sum_data$HEADER_TIME_STAMP = lubridate::as_datetime(sum_data$timestamp) sum_data = dplyr::left_join(sum_data, m) cor(sum_data$ENMO, sum_data$ENMO_t) }"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/mark_condition.html","id":null,"dir":"Reference","previous_headings":"","what":"Mark a Condition of a Specified Minimum Length — mark_condition","title":"Mark a Condition of a Specified Minimum Length — mark_condition","text":"Mark Condition Specified Minimum Length","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/mark_condition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mark a Condition of a Specified Minimum Length — mark_condition","text":"","code":"mark_condition(x, min_length = 1)"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/mark_condition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mark a Condition of a Specified Minimum Length — mark_condition","text":"x logical vector min_length minimum length, contiguous TRUE values required","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/mark_condition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mark a Condition of a Specified Minimum Length — mark_condition","text":"logical vector","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/mark_condition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mark a Condition of a Specified Minimum Length — mark_condition","text":"","code":"x = c(FALSE, TRUE, TRUE, FALSE, FALSE, rep(TRUE, 10), FALSE, rep(TRUE, 20)) mark_condition(x) #>  [1] FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #> [13]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #> [25]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE mark_condition(x, 2) #>  [1] FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #> [13]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #> [25]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE mark_condition(x, 5) #>  [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #> [13]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #> [25]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE mark_condition(x, 15) #>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #> [13] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #> [25]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/mims_default_extrapolation.html","id":null,"dir":"Reference","previous_headings":"","what":"Default MIMS worker functions — mims_default_extrapolation","title":"Default MIMS worker functions — mims_default_extrapolation","text":"Default MIMS worker functions","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/mims_default_extrapolation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default MIMS worker functions — mims_default_extrapolation","text":"","code":"mims_default_extrapolation(df, dynamic_range = NULL)  mims_default_interpolation(df)  mims_default_filtering(df)"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/mims_default_extrapolation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default MIMS worker functions — mims_default_extrapolation","text":"df data set data, usually time X/Y/Z.  Usually read_actigraphy dynamic_range dynamic range data.  passed get_dynamic_range","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/mims_default_extrapolation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default MIMS worker functions — mims_default_extrapolation","text":"data set data","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/mims_default_processing.html","id":null,"dir":"Reference","previous_headings":"","what":"Default MIMS Pre-processing — mims_default_processing","title":"Default MIMS Pre-processing — mims_default_processing","text":"Default MIMS Pre-processing","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/mims_default_processing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default MIMS Pre-processing — mims_default_processing","text":"","code":"mims_default_processing(   df,   use_extrapolation = TRUE,   use_filtering = TRUE,   verbose = TRUE,   dynamic_range = NULL,   round_after_processing = FALSE )"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/mims_default_processing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default MIMS Pre-processing — mims_default_processing","text":"df Data set raw accelerometry values, usually time X/Y/Z. Usually read_actigraphy use_extrapolation `TRUE` function apply extrapolation algorithm input signal, otherwise skip extrapolation linearly interpolate signal 100Hz. use_filtering `TRUE` function apply bandpass filtering input signal, otherwise skip filtering. verbose print diagnostic messages dynamic_range dynamic ranges input signal.  Passed mims_default_extrapolation.  needed use_extrapolation = TRUE round_after_processing result rounded 3 decimal values processing, make similar standard accelerometry?","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/mims_default_processing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default MIMS Pre-processing — mims_default_processing","text":"processed data set","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/read_acc_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read ActiGraph Accelerometer CSV — read_acc_csv","title":"Read ActiGraph Accelerometer CSV — read_acc_csv","text":"Read ActiGraph Accelerometer CSV","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/read_acc_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read ActiGraph Accelerometer CSV — read_acc_csv","text":"","code":"read_acc_csv(file, ..., only_xyz = TRUE)  extract_acc_header(file)"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/read_acc_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read ActiGraph Accelerometer CSV — read_acc_csv","text":"file CSV file read ... additional arguments pass read_csv only_xyz data subset X/Y/Z values (time)?","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/read_acc_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read ActiGraph Accelerometer CSV — read_acc_csv","text":"list header data set","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/read_acc_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read ActiGraph Accelerometer CSV — read_acc_csv","text":"","code":"file = system.file(\"extdata\", \"TAS1H30182785_2019-09-17.csv.gz\", package = \"SummarizedActigraphy\") if (file.exists(file)) {    out = read_acc_csv(file)    SummarizedActigraphy:::parse_acc_header(file) } #> $serial #> [1] \"TAS1H30182785\" #>  #> $start_time #> [1] \"18:40:00\" #>  #> $start_date #> [1] \"9/17/2019\" #>  #> $epoch #> [1] \"00:00:00\" #>  #> $download_time #> [1] \"19:20:05\" #>  #> $download_date #> [1] \"9/17/2019\" #>  #> $battery_voltage #> [1] \"4.18\" #>  #> $memory_address #> [1] \"0\" #>  #> $mode #> [1] \"12\" #>  #> $firmware #> [1] \"1.7.2\" #>  #> $actilife_version #> [1] \"6.13.3\" #>  #> $filter #> [1] \"Normal\" #>  #> $date_format #> [1] \"mdy\" #>  #> $sample_rate #> [1] 100 #>  file = system.file(\"extdata\", \"example1sec.csv\", package = \"AGread\") if (file.exists(file)) {    out = read_acc_csv(file, only_xyz = FALSE)    SummarizedActigraphy:::quick_check(out$data)    acc = out    class(acc) = \"AccData\"    SummarizedActigraphy:::quick_check(acc) }"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/read_actigraphy.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Actigraphy File — read_actigraphy","title":"Read Actigraphy File — read_actigraphy","text":"Read Actigraphy File","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/read_actigraphy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Actigraphy File — read_actigraphy","text":"","code":"read_actigraphy(file, ..., read_function = NULL)"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/read_actigraphy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Actigraphy File — read_actigraphy","text":"file file read ... additional arguments pass function read_function custom function read data .","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/read_actigraphy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Actigraphy File — read_actigraphy","text":"accelerometer object function used read file.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/read_actigraphy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Actigraphy File — read_actigraphy","text":"","code":"file = system.file(\"extdata\", \"TAS1H30182785_2019-09-17.gt3x\", package = \"SummarizedActigraphy\") res = read_actigraphy(file) #> Input is a .gt3x file, unzipping to a temporary location first... #> Unzipping gt3x data to /tmp/RtmpZXSAwj #> 1/1  #> Unzipping /home/runner/work/_temp/Library/SummarizedActigraphy/extdata/TAS1H30182785_2019-09-17.gt3x #>  === info.txt, log.bin extracted to /tmp/RtmpZXSAwj/TAS1H30182785_2019-09-17 #> GT3X information #>  $ Serial Number     :\"TAS1H30182785\" #>  $ Device Type       :\"Link\" #>  $ Firmware          :\"1.7.2\" #>  $ Battery Voltage   :\"4.18\" #>  $ Sample Rate       :100 #>  $ Start Date        : POSIXct, format: \"2019-09-17 18:40:00\" #>  $ Stop Date         : POSIXct, format: \"2019-09-18 19:00:00\" #>  $ Last Sample Time  : POSIXct, format: \"2019-09-17 19:20:05\" #>  $ TimeZone          :\"-04:00:00\" #>  $ Download Date     : POSIXct, format: \"2019-09-17 19:20:05\" #>  $ Board Revision    :\"8\" #>  $ Unexpected Resets :\"0\" #>  $ Acceleration Scale:256 #>  $ Acceleration Min  :\"-8.0\" #>  $ Acceleration Max  :\"8.0\" #>  $ Subject Name      :\"suffix_85\" #>  $ Serial Prefix     :\"TAS\" #> Parsing GT3X data via CPP.. expected sample size: 240500 #> ---GT3X PARAMETERS #> address: 0 key: 6 value: 1 #> address: 0 key: 7 value: 54703161 #> address: 0 key: 8 value: 8 #> address: 0 key: 9 value: 1534154836 #> address: 0 key: 13 value: 17235970 #> address: 0 key: 16 value: 3791650816 #> address: 0 key: 20 value: 0 #> address: 0 key: 21 value: 0 #> address: 0 key: 22 value: 0 #> address: 0 key: 23 value: 0 #> address: 0 key: 26 value: 2 #> address: 0 key: 28 value: 262013 #> address: 0 key: 29 value: 255 #> address: 0 key: 32 value: 16908288 #> address: 0 key: 37 value: 1024 #> address: 0 key: 38 value: 0 #> address: 0 key: 49 value: 2048 #> address: 0 key: 50 value: 88181047 #> address: 0 key: 51 value: 6.82667 #> address: 0 key: 55 value: 256 #> address: 0 key: 57 value: 333.87 #> address: 0 key: 58 value: 21 #> address: 0 key: 61 value: 2 #> address: 1 key: 0 value: 0 #> address: 1 key: 1 value: 872668711 #> address: 1 key: 2 (features)  value: 388 #> address: 1 key: 3 value: 1 #> address: 1 key: 4 value: 4294967131 #> address: 1 key: 5 value: 4294967095 #> address: 1 key: 6 value: 4294967149 #> address: 1 key: 7 value: 298 #> address: 1 key: 8 value: 286 #> address: 1 key: 9 value: 300 #> address: 1 key: 10 value: 100 #> address: 1 key: 12 (start time)  value: 1568745600 #> address: 1 key: 13 value: 1568833200 #> address: 1 key: 14 value: 1568745556 #> address: 1 key: 15 value: 74 #> address: 1 key: 16 value: 40 #> address: 1 key: 17 value: 72 #> address: 1 key: 20 value: 0 #> address: 1 key: 21 value: 0 #> address: 1 key: 33 value: 60000 #> address: 1 key: 34 value: 4294965247 #> address: 1 key: 35 value: 4294965190 #> address: 1 key: 36 value: 4294965237 #> address: 1 key: 37 value: 2051 #> address: 1 key: 38 value: 2000 #> address: 1 key: 39 value: 2048 #> address: 1 key: 40 value: 0 #> address: 1 key: 41 value: 1 #> address: 1 key: 42 value: 0 #> address: 1 key: 43 value: 4294967283 #> address: 1 key: 44 value: 0 #> address: 1 key: 45 value: 0 #> address: 1 key: 46 value: 0 #> ---END PARAMETERS #>  #> Activity with Sample Size of 0 #> payload start: 1568747741 #> total_records: 214100 #> max_samples: 240500 #> Activity with Sample Size of 0 #> payload start: 1568747759 #> total_records: 215900 #> max_samples: 240500 #> Total Records: 216000 #> Scaling... #> Creating dimnames  #> CPP returning  #> Done (in 0.536316633224487 seconds) testthat::expect_equal(mean(res$data$X), -0.0742151351351352)  file = \"blah.exe\" testthat::expect_error(read_actigraphy(file)) # \\donttest{ url = paste0(\"https://github.com/THLfi/read.gt3x/files/\", \"3522749/GT3X%2B.01.day.gt3x.zip\") destfile = tempfile(fileext = \".zip\") dl = utils::download.file(url, destfile = destfile, mode = \"wb\") gt3x_file = utils::unzip(destfile, exdir = tempdir()) gt3x_file = gt3x_file[!grepl(\"__MACOSX\", gt3x_file)] path = gt3x_file res = read_actigraphy(path) #> Input is a .gt3x file, unzipping to a temporary location first... #> Unzipping gt3x data to /tmp/RtmpZXSAwj #> 1/1  #> Unzipping /tmp/RtmpZXSAwj/GT3X+ (01 day).gt3x #>  === info.txt, activity.bin, lux.bin extracted to /tmp/RtmpZXSAwj/GT3X+(01day) #> GT3X information #>  $ Serial Number     :\"NEO1DXXXXXXXX\" #>  $ Device Type       :\"GT3XPlus\" #>  $ Firmware          :\"2.5.0\" #>  $ Battery Voltage   :\"4.22\" #>  $ Sample Rate       :30 #>  $ Start Date        : POSIXct, format: \"2012-06-27 10:54:00\" #>  $ Stop Date         : POSIXct, format: \"2012-06-28 11:54:00\" #>  $ Download Date     : POSIXct, format: \"2012-06-28 16:25:52\" #>  $ Board Revision    :\"4\" #>  $ Unexpected Resets :\"0\" #>  $ Sex               :\"Male\" #>  $ Height            :\"172.72\" #>  $ Mass              :\"69.8532249799612\" #>  $ Age               :\"43\" #>  $ Race              :\"White / Caucasian\" #>  $ Limb              :\"Ankle\" #>  $ Side              :\"Left\" #>  $ Dominance         :\"Non-Dominant\" #>  $ DateOfBirth       :\"621132192000000000\" #>  $ Subject Name      :\"GT3XPlus\" #>  $ Serial Prefix     :\"NEO\" #>  $ Last Sample Time  : 'POSIXct' num(0)  #>  - attr(*, \"tzone\")= chr \"GMT\" #>  $ Acceleration Scale:341 #>  $ Acceleration Min  :\"-6.0\" #>  $ Acceleration Max  :\"6.0\" #> Parsing GT3X data via CPP.. expected sample size: 2700000 #> Using NHANES-GT3X format - older format #> Sample size: 2700000 #> Scaling... #> Done (in 2.08577489852905 seconds) testthat::expect_equal(mean(res$data$X), -0.228406351135833)  dob = res$header$Value[res$header$Field == \"DateOfBirth\"] if (length(dob) > 0) {  SummarizedActigraphy:::ticks2datetime(dob) } #> [1] \"1969-04-17 GMT\"  # }"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/summarize_actigraphy.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Actigraphy Data — summarize_daily_actigraphy","title":"Summarize Actigraphy Data — summarize_daily_actigraphy","text":"Summarize Actigraphy Data","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/summarize_actigraphy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Actigraphy Data — summarize_daily_actigraphy","text":"","code":"summarize_daily_actigraphy(   x,   unit = \"1 min\",   fix_zeros = TRUE,   fill_in = TRUE,   trim = FALSE,   verbose = TRUE,   calculate_mims = FALSE,   calculate_ac = FALSE,   flag_data = TRUE,   ensure_all_time = TRUE,   flags = NULL,   ... )  summarise_daily_actigraphy(   x,   unit = \"1 min\",   fix_zeros = TRUE,   fill_in = TRUE,   trim = FALSE,   verbose = TRUE,   calculate_mims = FALSE,   calculate_ac = FALSE,   flag_data = TRUE,   ensure_all_time = TRUE,   flags = NULL,   ... )  summarize_actigraphy(   x,   unit = \"1 min\",   .fns = list(mean = mean, median = median),   verbose = TRUE,   ... )  collapse_daily_actigraphy(   x,   .fns = list(mean = function(x) mean(x, na.rm = TRUE), median = function(x) median(x,     na.rm = TRUE)),   verbose = TRUE )  summarise_actigraphy(   x,   unit = \"1 min\",   .fns = list(mean = mean, median = median),   verbose = TRUE,   ... )"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/summarize_actigraphy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Actigraphy Data — summarize_daily_actigraphy","text":"x AccData object.  `x` character, read_actigraphy run unit units group data take statistic fix_zeros fix_zeros run calculating measures? fill_in fix_zeros = TRUE, zeros filled last observation carried forward? trim fix_zeros = TRUE, time course trimmed zero values beginning end time course? observation carried forward? verbose print diagnostic messages calculate_mims MIMS units calculated? Passed calculate_measures calculate_ac Activity Counts activityCounts package calculated? flag_data [SummarizedActigraphy::flag_qc()] run? executed fix_zeros measure calculation ensure_all_time TRUE, times first last times output, even data time input flags flags calculate, passed [SummarizedActigraphy::flag_qc()] ... Additional arguments pass read_actigraphy .fns Functions apply selected columns. See across","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/summarize_actigraphy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Actigraphy Data — summarize_daily_actigraphy","text":"tsibble object, 86400 rows, one row second day `24*60*60`.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/summarize_actigraphy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Actigraphy Data — summarize_daily_actigraphy","text":"","code":"path = system.file(\"extdata\", \"TAS1H30182785_2019-09-17.gt3x\", package = \"SummarizedActigraphy\")  x = read_actigraphy(path) #> Input is a .gt3x file, unzipping to a temporary location first... #> Unzipping gt3x data to /tmp/RtmpZXSAwj #> 1/1  #> Unzipping /home/runner/work/_temp/Library/SummarizedActigraphy/extdata/TAS1H30182785_2019-09-17.gt3x #>  === info.txt, log.bin extracted to /tmp/RtmpZXSAwj/TAS1H30182785_2019-09-17 #> GT3X information #>  $ Serial Number     :\"TAS1H30182785\" #>  $ Device Type       :\"Link\" #>  $ Firmware          :\"1.7.2\" #>  $ Battery Voltage   :\"4.18\" #>  $ Sample Rate       :100 #>  $ Start Date        : POSIXct, format: \"2019-09-17 18:40:00\" #>  $ Stop Date         : POSIXct, format: \"2019-09-18 19:00:00\" #>  $ Last Sample Time  : POSIXct, format: \"2019-09-17 19:20:05\" #>  $ TimeZone          :\"-04:00:00\" #>  $ Download Date     : POSIXct, format: \"2019-09-17 19:20:05\" #>  $ Board Revision    :\"8\" #>  $ Unexpected Resets :\"0\" #>  $ Acceleration Scale:256 #>  $ Acceleration Min  :\"-8.0\" #>  $ Acceleration Max  :\"8.0\" #>  $ Subject Name      :\"suffix_85\" #>  $ Serial Prefix     :\"TAS\" #> Parsing GT3X data via CPP.. expected sample size: 240500 #> ---GT3X PARAMETERS #> address: 0 key: 6 value: 1 #> address: 0 key: 7 value: 54703161 #> address: 0 key: 8 value: 8 #> address: 0 key: 9 value: 1534154836 #> address: 0 key: 13 value: 17235970 #> address: 0 key: 16 value: 3791650816 #> address: 0 key: 20 value: 0 #> address: 0 key: 21 value: 0 #> address: 0 key: 22 value: 0 #> address: 0 key: 23 value: 0 #> address: 0 key: 26 value: 2 #> address: 0 key: 28 value: 262013 #> address: 0 key: 29 value: 255 #> address: 0 key: 32 value: 16908288 #> address: 0 key: 37 value: 1024 #> address: 0 key: 38 value: 0 #> address: 0 key: 49 value: 2048 #> address: 0 key: 50 value: 88181047 #> address: 0 key: 51 value: 6.82667 #> address: 0 key: 55 value: 256 #> address: 0 key: 57 value: 333.87 #> address: 0 key: 58 value: 21 #> address: 0 key: 61 value: 2 #> address: 1 key: 0 value: 0 #> address: 1 key: 1 value: 872668711 #> address: 1 key: 2 (features)  value: 388 #> address: 1 key: 3 value: 1 #> address: 1 key: 4 value: 4294967131 #> address: 1 key: 5 value: 4294967095 #> address: 1 key: 6 value: 4294967149 #> address: 1 key: 7 value: 298 #> address: 1 key: 8 value: 286 #> address: 1 key: 9 value: 300 #> address: 1 key: 10 value: 100 #> address: 1 key: 12 (start time)  value: 1568745600 #> address: 1 key: 13 value: 1568833200 #> address: 1 key: 14 value: 1568745556 #> address: 1 key: 15 value: 74 #> address: 1 key: 16 value: 40 #> address: 1 key: 17 value: 72 #> address: 1 key: 20 value: 0 #> address: 1 key: 21 value: 0 #> address: 1 key: 33 value: 60000 #> address: 1 key: 34 value: 4294965247 #> address: 1 key: 35 value: 4294965190 #> address: 1 key: 36 value: 4294965237 #> address: 1 key: 37 value: 2051 #> address: 1 key: 38 value: 2000 #> address: 1 key: 39 value: 2048 #> address: 1 key: 40 value: 0 #> address: 1 key: 41 value: 1 #> address: 1 key: 42 value: 0 #> address: 1 key: 43 value: 4294967283 #> address: 1 key: 44 value: 0 #> address: 1 key: 45 value: 0 #> address: 1 key: 46 value: 0 #> ---END PARAMETERS #>  #> Activity with Sample Size of 0 #> payload start: 1568747741 #> total_records: 214100 #> max_samples: 240500 #> Activity with Sample Size of 0 #> payload start: 1568747759 #> total_records: 215900 #> max_samples: 240500 #> Total Records: 216000 #> Scaling... #> Creating dimnames  #> CPP returning  #> Done (in 0.964431762695312 seconds)  options(digit.secs = 2)  fixed = fix_zeros(x) daily = summarize_daily_actigraphy(fixed, fix_zeros = FALSE) #> Flagging data #> Flagging Spikes #> Flagging Interval Jumps #> Flagging Spikes at Second-level #> Flagging Repeated Values #> Flagging Device Limit Values #> Flagging Zero Values #> Flagging 'Impossible' Values #> Calculating ai0 #> Calculating MAD #> Joining AI and MAD #> Joining flags average_day = collapse_daily_actigraphy(daily) #> Getting the First Day #> Summarizing Data if (FALSE) {   average_day = summarize_actigraphy(fixed, fix_zeros = FALSE)   if (requireNamespace(\"ggplot2\", quietly = TRUE)) {     library(magrittr)     average_day %>%       ggplot(aes(x = time, y = ai_mean)) +       geom_line()      average_day %>%       ggplot(aes(x = time, y = ai_median)) +       geom_line()   } }"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/tidy_axes.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy axes to a long format — tidy_axes","title":"Tidy axes to a long format — tidy_axes","text":"Tidy axes long format","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/tidy_axes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy axes to a long format — tidy_axes","text":"","code":"tidy_axes(df, only_xyz = TRUE)"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/tidy_axes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy axes to a long format — tidy_axes","text":"df object columns time column `X`, `Y`, `Z` object class `AccData` only_xyz data subset X/Y/Z values (time)?","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/tidy_axes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy axes to a long format — tidy_axes","text":"long data set `time`, `axis`, `value`","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/tidy_axes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy axes to a long format — tidy_axes","text":"","code":"file = system.file(\"extdata\", \"TAS1H30182785_2019-09-17.gt3x\", package = \"SummarizedActigraphy\") res = read_actigraphy(file) #> Input is a .gt3x file, unzipping to a temporary location first... #> Unzipping gt3x data to /tmp/RtmpZXSAwj #> 1/1  #> Unzipping /home/runner/work/_temp/Library/SummarizedActigraphy/extdata/TAS1H30182785_2019-09-17.gt3x #>  === info.txt, log.bin extracted to /tmp/RtmpZXSAwj/TAS1H30182785_2019-09-17 #> GT3X information #>  $ Serial Number     :\"TAS1H30182785\" #>  $ Device Type       :\"Link\" #>  $ Firmware          :\"1.7.2\" #>  $ Battery Voltage   :\"4.18\" #>  $ Sample Rate       :100 #>  $ Start Date        : POSIXct, format: \"2019-09-17 18:40:00\" #>  $ Stop Date         : POSIXct, format: \"2019-09-18 19:00:00\" #>  $ Last Sample Time  : POSIXct, format: \"2019-09-17 19:20:05\" #>  $ TimeZone          :\"-04:00:00\" #>  $ Download Date     : POSIXct, format: \"2019-09-17 19:20:05\" #>  $ Board Revision    :\"8\" #>  $ Unexpected Resets :\"0\" #>  $ Acceleration Scale:256 #>  $ Acceleration Min  :\"-8.0\" #>  $ Acceleration Max  :\"8.0\" #>  $ Subject Name      :\"suffix_85\" #>  $ Serial Prefix     :\"TAS\" #> Parsing GT3X data via CPP.. expected sample size: 240500 #> ---GT3X PARAMETERS #> address: 0 key: 6 value: 1 #> address: 0 key: 7 value: 54703161 #> address: 0 key: 8 value: 8 #> address: 0 key: 9 value: 1534154836 #> address: 0 key: 13 value: 17235970 #> address: 0 key: 16 value: 3791650816 #> address: 0 key: 20 value: 0 #> address: 0 key: 21 value: 0 #> address: 0 key: 22 value: 0 #> address: 0 key: 23 value: 0 #> address: 0 key: 26 value: 2 #> address: 0 key: 28 value: 262013 #> address: 0 key: 29 value: 255 #> address: 0 key: 32 value: 16908288 #> address: 0 key: 37 value: 1024 #> address: 0 key: 38 value: 0 #> address: 0 key: 49 value: 2048 #> address: 0 key: 50 value: 88181047 #> address: 0 key: 51 value: 6.82667 #> address: 0 key: 55 value: 256 #> address: 0 key: 57 value: 333.87 #> address: 0 key: 58 value: 21 #> address: 0 key: 61 value: 2 #> address: 1 key: 0 value: 0 #> address: 1 key: 1 value: 872668711 #> address: 1 key: 2 (features)  value: 388 #> address: 1 key: 3 value: 1 #> address: 1 key: 4 value: 4294967131 #> address: 1 key: 5 value: 4294967095 #> address: 1 key: 6 value: 4294967149 #> address: 1 key: 7 value: 298 #> address: 1 key: 8 value: 286 #> address: 1 key: 9 value: 300 #> address: 1 key: 10 value: 100 #> address: 1 key: 12 (start time)  value: 1568745600 #> address: 1 key: 13 value: 1568833200 #> address: 1 key: 14 value: 1568745556 #> address: 1 key: 15 value: 74 #> address: 1 key: 16 value: 40 #> address: 1 key: 17 value: 72 #> address: 1 key: 20 value: 0 #> address: 1 key: 21 value: 0 #> address: 1 key: 33 value: 60000 #> address: 1 key: 34 value: 4294965247 #> address: 1 key: 35 value: 4294965190 #> address: 1 key: 36 value: 4294965237 #> address: 1 key: 37 value: 2051 #> address: 1 key: 38 value: 2000 #> address: 1 key: 39 value: 2048 #> address: 1 key: 40 value: 0 #> address: 1 key: 41 value: 1 #> address: 1 key: 42 value: 0 #> address: 1 key: 43 value: 4294967283 #> address: 1 key: 44 value: 0 #> address: 1 key: 45 value: 0 #> address: 1 key: 46 value: 0 #> ---END PARAMETERS #>  #> Activity with Sample Size of 0 #> payload start: 1568747741 #> total_records: 214100 #> max_samples: 240500 #> Activity with Sample Size of 0 #> payload start: 1568747759 #> total_records: 215900 #> max_samples: 240500 #> Total Records: 216000 #> Scaling... #> Creating dimnames  #> CPP returning  #> Done (in 0.529593229293823 seconds) long = tidy_axes(res)"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/write_acc_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Write ActiGraph-like Accelerometer CSV — write_acc_csv","title":"Write ActiGraph-like Accelerometer CSV — write_acc_csv","text":"Write ActiGraph-like Accelerometer CSV","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/write_acc_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write ActiGraph-like Accelerometer CSV — write_acc_csv","text":"","code":"write_acc_csv(x, file = tempfile(fileext = \".csv.gz\"))"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/write_acc_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write ActiGraph-like Accelerometer CSV — write_acc_csv","text":"x either AccData data.frame time values. file CSV file write ","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/write_acc_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write ActiGraph-like Accelerometer CSV — write_acc_csv","text":"character path output file.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/write_acc_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write ActiGraph-like Accelerometer CSV — write_acc_csv","text":"","code":"file = system.file(\"extdata\", \"TAS1H30182785_2019-09-17.csv.gz\", package = \"SummarizedActigraphy\") if (file.exists(file)) {    x = read_acc_csv(file)    outfile = write_acc_csv(x)    out2 = read_acc_csv(outfile)    all.equal(x$data, out2$data) } #> [1] TRUE"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/xyz.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector of X, Y, Z, and maybe time — xyz","title":"Vector of X, Y, Z, and maybe time — xyz","text":"Vector X, Y, Z, maybe time","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/xyz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector of X, Y, Z, and maybe time — xyz","text":"","code":"xyz  xyzt  txyz"},{"path":"http://johnmuschelli.com/SummarizedActigraphy/reference/xyz.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Vector of X, Y, Z, and maybe time — xyz","text":"vector 3 4 elements, : X value extract X column Y value extract Y column Z value extract Y column time value extract time column object class character length 4. object class character length 4.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/news/index.html","id":"summarizedactigraphy-050","dir":"Changelog","previous_headings":"","what":"SummarizedActigraphy 0.5.0","title":"SummarizedActigraphy 0.5.0","text":"Added calibrate estimate_calibration_values work GGIR. Added ggir_process can actually use GGIR functionality.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/news/index.html","id":"summarizedactigraphy-042","dir":"Changelog","previous_headings":"","what":"SummarizedActigraphy 0.4.2","title":"SummarizedActigraphy 0.4.2","text":"Added flag_* functions https://wwwn.cdc.gov/Nchs/Nhanes/2011-2012/PAXMIN_G.htm#Quality_Assurance_&_Quality_Control. Added ensure_all_time flag calculate_measures.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/news/index.html","id":"summarizedactigraphy-031","dir":"Changelog","previous_headings":"","what":"SummarizedActigraphy 0.3.1","title":"SummarizedActigraphy 0.3.1","text":"Added by_second option fix_zeros.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/news/index.html","id":"summarizedactigraphy-030","dir":"Changelog","previous_headings":"","what":"SummarizedActigraphy 0.3.0","title":"SummarizedActigraphy 0.3.0","text":"Slot now data data.read_actigraphy. things epoch changed unit. Added collapse_daily_actigraphy can collapse daily data.","code":""},{"path":"http://johnmuschelli.com/SummarizedActigraphy/news/index.html","id":"summarizedactigraphy-010","dir":"Changelog","previous_headings":"","what":"SummarizedActigraphy 0.1.0","title":"SummarizedActigraphy 0.1.0","text":"Added actigraph*, currently eBayes lmFit. Added NEWS.md file track changes package. Added functions ability download data.","code":""}]
